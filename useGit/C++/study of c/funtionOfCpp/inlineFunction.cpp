#include <iostream>
/**
 * 计算极执行时原理：每条指令都有特定地址，逐条执行，有时会条过一些语句（循环或者分支时）
 * 执行到函数调用指令时，程序在函数调用后立即存储该指令地址，并将参数复制到堆栈（为此保留的内存块），跳到标记函数起点的内存单元，执行函数代码
 * （也许还需要将返回值放入寄存器中），然后跳回到地址被保存的指令处接着执行下面的代码（类似于，看文章的时候跳下去看脚注，然后跳回来继续看一样）这种来回跳跃意味着需要更多开销
 * 
 * 为了处理这个问题，c++有了内联函数————程序无需跳到另一个位置执行代码，再跳回来，所以速度会更快一些，但是会开销更多内存
 * 
 * 内联函数在函数调用的时间相对程序时间比较多时使用
 * 此外，不能递归！！！
 * 
*/

inline double  square (double x)
{
    return x * x;
}

int main()
{
    using namespace std;
    double a, b;

    a = square(5.0);
    b = square( 4.5 + 7.5);

    double c = 13.0;

    cout << "a is : " << a << " , b is "<< b <<endl;
    cout << "c is " << c;
    cout << " now c squared = "<< square (c ++) <<endl;
    cout << " now c is " << c <<endl;
    //c递增了 说明内联函数也是按值传递的
    return 0;
}